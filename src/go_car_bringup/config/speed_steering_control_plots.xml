<?xml version='1.0' encoding='UTF-8'?>
<root>
    <tabbed_widget name="Main Window" parent="main_window">
        <Tab containers="1" tab_name="tab1">
            <Container>
                <DockSplitter count="2" orientation="-" sizes="0.5;0.5">
                    <DockSplitter count="2" orientation="|" sizes="0.5;0.5">
                        <DockArea name="...">
                            <plot mode="TimeSeries" flip_x="false" flip_y="false" style="Lines">
                                <range left="24.820000" bottom="-0.669220" right="29.836000" top="27.438040"/>
                                <limitY/>
                                <curve name="/cmd_car/desired_speed" color="#1f77b4">
                                    <transform name="Scale/Offset" alias="/cmd_car/desired_speed[Scale/Offset]">
                                        <options value_scale="0.78" time_offset="0" value_offset="0"/>
                                    </transform>
                                </curve>
                                <curve name="/go_car/joint_states/chassis_to_rear_left_wheel/velocity" color="#17becf"/>
                                <curve name="/go_car/joint_states/chassis_to_rear_right_wheel/velocity" color="#bcbd22"/>
                            </plot>
                        </DockArea>
                        <DockArea name="...">
                            <plot mode="TimeSeries" flip_x="false" flip_y="false" style="Lines">
                                <range left="24.820000" bottom="-0.000332" right="29.836000" top="0.000332"/>
                                <limitY/>
                                <curve name="/cmd_car/desired_steering_angle" color="#d62728"/>
                                <curve name="/go_car/joint_states/chassis_to_left_steering_column/position" color="#1f77b4"/>
                                <curve name="/go_car/joint_states/chassis_to_right_steering_column/position" color="#d62728"/>
                            </plot>
                        </DockArea>
                    </DockSplitter>
                    <DockSplitter count="2" orientation="|" sizes="0.5;0.5">
                        <DockArea name="...">
                            <plot mode="TimeSeries" flip_x="false" flip_y="false" style="Lines">
                                <range left="24.820000" bottom="-2049.992339" right="29.836000" top="49.685911"/>
                                <limitY/>
                                <curve name="/go_car/joint_forces/left_rear_traction" color="#1ac938"/>
                                <curve name="/go_car/joint_forces/right_rear_traction" color="#ff7f0e"/>
                            </plot>
                        </DockArea>
                        <DockArea name="...">
                            <plot mode="TimeSeries" flip_x="false" flip_y="false" style="Lines">
                                <range left="24.820000" bottom="-33.216234" right="29.836000" top="33.213437"/>
                                <limitY/>
                                <curve name="/go_car/joint_forces/left_steering_column" color="#f14cc1"/>
                                <curve name="/go_car/joint_forces/right_steering_column" color="#9467bd"/>
                            </plot>
                        </DockArea>
                    </DockSplitter>
                </DockSplitter>
            </Container>
        </Tab>
        <currentTabIndex index="0"/>
    </tabbed_widget>
    <use_relative_time_offset enabled="1"/>
    <!-- - - - - - - - - - - - - - - -->
    <!-- - - - - - - - - - - - - - - -->
    <Plugins>
        <plugin ID="DataLoad CSV">
            <default delimiter="0" time_axis=""/>
        </plugin>
        <plugin ID="DataLoad MCAP"/>
        <plugin ID="DataLoad ROS bags">
            <use_header_stamp value="false"/>
            <discard_large_arrays value="true"/>
            <max_array_size value="100"/>
            <boolean_strings_to_number value="true"/>
            <remove_suffix_from_strings value="true"/>
        </plugin>
        <plugin ID="DataLoad ULog"/>
        <plugin ID="ROS Topic Subscriber">
            <use_header_stamp value="false"/>
            <discard_large_arrays value="true"/>
            <max_array_size value="100"/>
            <boolean_strings_to_number value="true"/>
            <remove_suffix_from_strings value="true"/>
        </plugin>
        <plugin ID="UDP Server"/>
        <plugin ID="WebSocket Server"/>
        <plugin ID="ZMQ Subscriber"/>
        <plugin ID="Fast Fourier Transform"/>
        <plugin ID="Quaternion to RPY"/>
        <plugin ID="Reactive Script Editor">
            <library code="--[[ Helper function to create a series from arrays&#xa;&#xa; new_series: a series previously created with ScatterXY.new(name)&#xa; prefix:     prefix of the timeseries, before the index of the array&#xa; suffix_X:   suffix to complete the name of the series containing the X value. If [nil], use the index of the array.&#xa; suffix_Y:   suffix to complete the name of the series containing the Y value&#xa; timestamp:   usually the tracker_time variable&#xa;              &#xa; Example:&#xa; &#xa; Assuming we have multiple series in the form:&#xa; &#xa;   /trajectory/node.{X}/position/x&#xa;   /trajectory/node.{X}/position/y&#xa;   &#xa; where {N} is the index of the array (integer). We can create a reactive series from the array with:&#xa; &#xa;   new_series = ScatterXY.new(&quot;my_trajectory&quot;) &#xa;   CreateSeriesFromArray( new_series, &quot;/trajectory/node&quot;, &quot;position/x&quot;, &quot;position/y&quot;, tracker_time );&#xa;--]]&#xa;&#xa;function CreateSeriesFromArray( new_series, prefix, suffix_X, suffix_Y, timestamp )&#xa;  &#xa;  --- clear previous values&#xa;  new_series:clear()&#xa;  &#xa;  --- Append points to new_series&#xa;  index = 0&#xa;  while(true) do&#xa;&#xa;    x = index;&#xa;    -- if not nil, get the X coordinate from a series&#xa;    if suffix_X ~= nil then &#xa;      series_x = TimeseriesView.find( string.format( &quot;%s.%d/%s&quot;, prefix, index, suffix_X) )&#xa;      if series_x == nil then break end&#xa;      x = series_x:atTime(timestamp)&#x9; &#xa;    end&#xa;    &#xa;    series_y = TimeseriesView.find( string.format( &quot;%s.%d/%s&quot;, prefix, index, suffix_Y) )&#xa;    if series_y == nil then break end &#xa;    y = series_y:atTime(timestamp)&#xa;    &#xa;    new_series:push_back(x,y)&#xa;    index = index+1&#xa;  end&#xa;end&#xa;&#xa;--[[ Similar to the built-in function GetSeriesNames(), but select only the names with a give prefix. --]]&#xa;&#xa;function GetSeriesNamesByPrefix(prefix)&#xa;  -- GetSeriesNames(9 is a built-in function&#xa;  all_names = GetSeriesNames()&#xa;  filtered_names = {}&#xa;  for i, name in ipairs(all_names)  do&#xa;    -- check the prefix&#xa;    if name:find(prefix, 1, #prefix) then&#xa;      table.insert(filtered_names, name);&#xa;    end&#xa;  end&#xa;  return filtered_names&#xa;end&#xa;&#xa;--[[ Modify an existing series, applying offsets to all their X and Y values&#xa;&#xa; series: an existing timeseries, obtained with TimeseriesView.find(name)&#xa; delta_x: offset to apply to each x value&#xa; delta_y: offset to apply to each y value &#xa;  &#xa;--]]&#xa;&#xa;function ApplyOffsetInPlace(series, delta_x, delta_y)&#xa;  -- use C++ indeces, not Lua indeces&#xa;  for index=0, series:size()-1 do&#xa;    x,y = series:at(index)&#xa;    series:set(index, x + delta_x, y + delta_y)&#xa;  end&#xa;end&#xa;"/>
            <scripts/>
        </plugin>
        <plugin ID="CSV Exporter"/>
        <plugin ID="ROS /rosout Visualization"/>
        <plugin ID="ROS Topic Re-Publisher"/>
    </Plugins>
    <!-- - - - - - - - - - - - - - - -->
    <previouslyLoaded_Datafiles/>
    <previouslyLoaded_Streamer name="ROS Topic Subscriber"/>
    <!-- - - - - - - - - - - - - - - -->
    <customMathEquations/>
    <snippets/>
    <!-- - - - - - - - - - - - - - - -->
</root>

